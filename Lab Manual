{
 "metadata": {
  "name": "Lab Manual"
 },
 "nbformat": 3,
 "nbformat_minor": 0,
 "worksheets": [
  {
   "cells": [
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": "Welcome to the Lab Manual! This is a great place to get started if you want to know about the basics of python and how to operate the rover.\nLet's start off really easy. To print text in python, simply write \"print\" and then \"your text inside quotes\". Like so:"
    },
    {
     "cell_type": "raw",
     "metadata": {},
     "source": "print \"Hello World!\""
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": "Which results in:"
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "print \"Hello World!\"",
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "Hello World!\n"
      }
     ],
     "prompt_number": 15
    },
    {
     "cell_type": "markdown",
     "metadata": {},
     "source": "To add comments within the code, use # before the text."
    },
    {
     "cell_type": "raw",
     "metadata": {},
     "source": "# this is the first comment\nspam = 1  # and this is the second comment\n  # ... and now a third!\ntext = \"# This is not a comment because it's inside quotes.\""
    },
    {
     "cell_type": "raw",
     "metadata": {},
     "source": "Now let's get familiar with making equations using numbers."
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "print 2 + 2         #it equals 4 if your brain is truly struggling\nprint 50 - 5*6\nprint (50 - 5.0*6) / 4\nprint 8 / 5.0\nprint 17 / 3        # int / int -> int\nprint 17 / 3.0      # int / float -> float\nprint 17 // 3.0     # explicit floor division discards the fractional part\nprint 17 % 3        # the % operator returns the remainder of the division\nprint 5 * 3 + 2     # result * divisor + remainder\nprint 5 ** 2        # 5 squared\nprint 2 ** 7        # 2 to the power of 7\n",
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "4\n20\n5.0\n1.6\n5\n5.66666666667\n5.0\n2\n17\n25\n128\n"
      }
     ],
     "prompt_number": 16
    },
    {
     "cell_type": "raw",
     "metadata": {},
     "source": "The equal sign (=) is used to assign a value to a variable. Afterwards, no result is displayed before the next interactive prompt:"
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "width = 20\nheight = 5 * 9\nprint width * height",
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "900\n"
      }
     ],
     "prompt_number": 17
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "i = 256*256\nprint 'The value of i is', i",
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "The value of i is 65536\n"
      }
     ],
     "prompt_number": 18
    },
    {
     "cell_type": "raw",
     "metadata": {},
     "source": "Now let's making something pretty neat: the Fibonacci Sequence. In this sequence the sum of the two previous numbers equals the following number."
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "a, b = 0, 1   # set a = 0 and b = 1\nwhile b < 100:  # runs the indented code provided that b is less than 100\n\tprint b  # display the value of b\n        a, b = b, a+b  # a is now equal to b, and b is now equal to the sum of a and b\n\t\t       # the process is repeated, restarting with the new a and b values, until b is more than 100",
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "1\n1\n2\n3\n5\n8\n13\n21\n34\n55\n89\n"
      }
     ],
     "prompt_number": 19
    },
    {
     "cell_type": "raw",
     "metadata": {},
     "source": "Now we'll start working with a package called \"numpy\"."
    },
    {
     "cell_type": "raw",
     "metadata": {},
     "source": "Import the numpy package under the name np. This makes it easier when we call a function from numpy.  "
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "import numpy as np",
     "language": "python",
     "metadata": {},
     "outputs": [],
     "prompt_number": 20
    },
    {
     "cell_type": "raw",
     "metadata": {},
     "source": "Create a null vector of size 10."
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "Z = np.zeros(10)\nprint(Z)",
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "[ 0.  0.  0.  0.  0.  0.  0.  0.  0.  0.]\n"
      }
     ],
     "prompt_number": 21
    },
    {
     "cell_type": "raw",
     "metadata": {},
     "source": "Create a null vector of size 10 but the fifth value which is 1."
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "Z = np.zeros(10)  # begin with a null vector\nZ[4] = 1  # redefine the fifth value to be 1\nprint(Z)",
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "[ 0.  0.  0.  0.  1.  0.  0.  0.  0.  0.]\n"
      }
     ],
     "prompt_number": 22
    },
    {
     "cell_type": "raw",
     "metadata": {},
     "source": "Create a vector with values ranging from 10 to 49."
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "Z = np.arange(10,50)\nprint(Z)",
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "[10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34\n 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49]\n"
      }
     ],
     "prompt_number": 23
    },
    {
     "cell_type": "raw",
     "metadata": {},
     "source": "Create a 3x3 matrix with values ranging from 0 to 8"
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "Z = np.arange(9).reshape(3,3)  # arrange lists the values 0 to 8\nprint(Z)\t\t               # reshape forms a new line after every 3 terms, resulting in the 3x3 matrix",
     "language": "python",
     "metadata": {},
     "outputs": []
    },
    {
     "cell_type": "raw",
     "metadata": {},
     "source": "Find indices of non-zero elements from [1,2,0,0,4,0]"
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "nz = np.nonzero([1,2,0,0,4,0])\nprint(nz)",
     "language": "python",
     "metadata": {},
     "outputs": []
    },
    {
     "cell_type": "raw",
     "metadata": {},
     "source": "Create a 3x3 identity matrix. \nIdentity matrix: a square matrix with ones on the diagonal (from top-left to bottom-right) and zeros elsewhere"
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "Z = np.eye(3) \nprint(Z)",
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "[[ 1.  0.  0.]\n [ 0.  1.  0.]\n [ 0.  0.  1.]]\n"
      }
     ],
     "prompt_number": 24
    },
    {
     "cell_type": "raw",
     "metadata": {},
     "source": "Create a 5x5 matrix with values 1,2,3,4 just below the diagonal"
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "Z = np.diag(1+np.arange(4),k=-1)\nprint(Z)",
     "language": "python",
     "metadata": {},
     "outputs": []
    },
    {
     "cell_type": "raw",
     "metadata": {},
     "source": "Create a 3x3x3 array with random values"
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "Z = np.random.random((3,3,3))\nprint(Z)",
     "language": "python",
     "metadata": {},
     "outputs": []
    },
    {
     "cell_type": "raw",
     "metadata": {},
     "source": "Create a 8x8 matrix and fill it with a checkerboard pattern"
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "Z = np.zeros((8,8),dtype=int)\nZ[1::2,::2] = 1\nZ[::2,1::2] = 1\nprint(Z)",
     "language": "python",
     "metadata": {},
     "outputs": []
    },
    {
     "cell_type": "raw",
     "metadata": {},
     "source": "Create a 10x10 array with random values and find the minimum and maximum values. The values range from 0 to 1."
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "Z = np.random.random((10,10))\nZmin, Zmax = Z.min(), Z.max()\nprint(Zmin, Zmax)",
     "language": "python",
     "metadata": {},
     "outputs": []
    },
    {
     "cell_type": "raw",
     "metadata": {},
     "source": "Create a checkerboard 8x8 matrix using the tile function"
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "Z = np.tile( np.array([[0,1],[1,0]]), (4,4))\nprint(Z)",
     "language": "python",
     "metadata": {},
     "outputs": []
    },
    {
     "cell_type": "raw",
     "metadata": {},
     "source": "Normalize a 5x5 random matrix (between 0 and 1)"
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "Z = np.random.random((5,5))\nZmax, Zmin = Z.max(), Z.min()\nZ = (Z - Zmin)/(Zmax - Zmin)\nprint(Z)",
     "language": "python",
     "metadata": {},
     "outputs": []
    },
    {
     "cell_type": "raw",
     "metadata": {},
     "source": "Multiply a 5x3 matrix by a 3x2 matrix (real matrix product)"
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "Z = np.dot(np.ones((5,3)), np.ones((3,2)))\nprint(Z)",
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "[[ 3.  3.]\n [ 3.  3.]\n [ 3.  3.]\n [ 3.  3.]\n [ 3.  3.]]\n"
      }
     ],
     "prompt_number": 31
    },
    {
     "cell_type": "raw",
     "metadata": {},
     "source": "Create a 5x5 matrix with row values ranging from 0 to 4"
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "Z = np.zeros((5,5))\nZ += np.arange(5)\nprint(Z)",
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "[[ 0.  1.  2.  3.  4.]\n [ 0.  1.  2.  3.  4.]\n [ 0.  1.  2.  3.  4.]\n [ 0.  1.  2.  3.  4.]\n [ 0.  1.  2.  3.  4.]]\n"
      }
     ],
     "prompt_number": 30
    },
    {
     "cell_type": "raw",
     "metadata": {},
     "source": "Create a vector of size 10 with values ranging from 0 to 1, both excluded"
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "Z = np.linspace(0,1,12,endpoint=True)[1:-1]\nprint(Z)",
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "[ 0.09090909  0.18181818  0.27272727  0.36363636  0.45454545  0.54545455\n  0.63636364  0.72727273  0.81818182  0.90909091]\n"
      }
     ],
     "prompt_number": 29
    },
    {
     "cell_type": "raw",
     "metadata": {},
     "source": "Create a random vector of size 10 and sort it from lowest value to highest value"
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "Z = np.random.random(10)\nZ.sort()\nprint(Z)",
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "[ 0.0770365   0.27436902  0.27710338  0.42996206  0.46879024  0.48510387\n  0.53443001  0.5389634   0.53926519  0.70518236]\n"
      }
     ],
     "prompt_number": 28
    },
    {
     "cell_type": "raw",
     "metadata": {},
     "source": "Consider two random array A anb B, check if they are equal."
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "A = np.random.randint(0,2,5)\nB = np.random.randint(0,2,5)\nequal = np.allclose(A,B)\nprint(equal)",
     "language": "python",
     "metadata": {},
     "outputs": []
    },
    {
     "cell_type": "raw",
     "metadata": {},
     "source": "Create a random vector of size 30 and find the mean value"
    },
    {
     "cell_type": "code",
     "collapsed": false,
     "input": "Z = np.random.random(30)\nm = Z.mean()\nprint(m)     ",
     "language": "python",
     "metadata": {},
     "outputs": [
      {
       "output_type": "stream",
       "stream": "stdout",
       "text": "[ 0.28696378  0.13910734  0.22314809  0.69156532  0.57045368  0.3351158\n  0.01875979  0.32583685  0.32885669  0.50876792  0.17631036  0.57132169\n  0.02621095  0.81814637  0.87454985  0.79244842  0.71708902  0.47771504\n  0.91918494  0.42635573  0.90931601  0.44069586  0.30939463  0.51264218\n  0.44350487  0.82540425  0.39941154  0.19427845  0.09346112  0.18726312]\n0.451442655035\n"
      }
     ],
     "prompt_number": 27
    },
    {
     "cell_type": "raw",
     "metadata": {},
     "source": "And there you have it! Hopefully you aren't feeling too overwhelmed with this crash course on matrices. Matrices become important when working with the rover's webcam because each pixel has a value and location in a similar format as a matrix. Numpy is great at organizing and processing the data so we can make use of what the rover is seeing. Head on to the next lesson to learn more about the rover."
    }
   ],
   "metadata": {}
  }
 ]
}
